// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Js_exn = require("rescript/lib/js/js_exn.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Onboarding = require("@metamask/onboarding");

function useMetaMask(param) {
  var initialState = Onboarding.isMetaMaskInstalled() ? /* NotConnected */1 : /* NotInstalled */0;
  var match = React.useState(function () {
        return new Onboarding();
      });
  var onboardingUtil = match[0];
  var match$1 = React.useState(function () {
        return initialState;
      });
  var setState = match$1[1];
  var onAccountsChanged = React.useCallback((function (accounts) {
          if (accounts.length > 0) {
            setState(function (param) {
                  return {
                          TAG: /* Connected */1,
                          _0: accounts
                        };
                });
          } else {
            setState(function (param) {
                  return /* NotConnected */1;
                });
          }
          onboardingUtil.stopOnboarding();
        }), []);
  var connect = React.useCallback((function (param) {
          if (Onboarding.isMetaMaskInstalled()) {
            setState(function (param) {
                  return /* Connecting */2;
                });
            return $$Promise.$$catch(ethereum.request({
                              method: "eth_requestAccounts"
                            }).then(function (accounts) {
                            Curry._1(onAccountsChanged, accounts);
                            return Promise.resolve(undefined);
                          }), (function (error) {
                          if (error.RE_EXN_ID === Js_exn.$$Error) {
                            var message = error._1.message;
                            if (message !== undefined) {
                              setState(function (param) {
                                    return {
                                            TAG: /* ConnectionError */0,
                                            _0: message
                                          };
                                  });
                            } else {
                              setState(function (param) {
                                    return {
                                            TAG: /* ConnectionError */0,
                                            _0: "Unknown error"
                                          };
                                  });
                            }
                          } else {
                            throw {
                                  RE_EXN_ID: "Match_failure",
                                  _1: [
                                    "MetaMask.res",
                                    40,
                                    8
                                  ],
                                  Error: new Error()
                                };
                          }
                          return Promise.resolve(undefined);
                        }));
          } else {
            onboardingUtil.startOnboarding();
            return Promise.resolve(undefined);
          }
        }), [onAccountsChanged]);
  var disconnect = React.useCallback((function (param) {
          setState(function (param) {
                return /* NotConnected */1;
              });
        }), []);
  React.useEffect((function () {
          if (Onboarding.isMetaMaskInstalled()) {
            ethereum.on("accountsChanged", onAccountsChanged);
          }
          return (function (param) {
                    if (Onboarding.isMetaMaskInstalled()) {
                      ethereum.removeListener("accountsChanged", onAccountsChanged);
                      return ;
                    }
                    
                  });
        }), [onAccountsChanged]);
  return [
          match$1[0],
          connect,
          disconnect
        ];
}

function useChainId(param) {
  var match = React.useState(function () {
        
      });
  var setChainId = match[1];
  var onChainChanged = React.useCallback((function (chainId) {
          setChainId(function (param) {
                return chainId;
              });
        }), []);
  React.useEffect((function () {
          if (Onboarding.isMetaMaskInstalled()) {
            ethereum.on("chainChanged", onChainChanged);
          }
          return (function (param) {
                    if (Onboarding.isMetaMaskInstalled()) {
                      ethereum.removeListener("chainChanged", onChainChanged);
                      return ;
                    }
                    
                  });
        }), [onChainChanged]);
  return match[0];
}

exports.useMetaMask = useMetaMask;
exports.useChainId = useChainId;
/* react Not a pure module */
